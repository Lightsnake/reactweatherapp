{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeatherProp","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","process","App","state","undefined","getWeather","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94c11fae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <p className=\"title-container__subtitle\"> Find out temperature, conditions and more...</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles; ","import React from 'react';\r\n\r\nconst Form = props =>(\r\n    <form onSubmit={props.getWeatherProp}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"city\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"country\"/>\r\n        <button> Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form; ","import React from 'react';\r\n\r\n\r\nconst Weather = props =>(\r\n    <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\"> Location: \r\n                <span className=\"weather__value\"> {props.city}, {props.country}</span> \r\n            </p>}\r\n        {\r\n            props.temperature && <p className=\"weather__key\"> Temperature: \r\n                <span className=\"weather__value\"> {props.temperature}Â° Degrees</span>\r\n            </p>}\r\n        {\r\n            props.humidity && <p className=\"weather__key\"> Humidity:\r\n                <span className=\"weather__value\"> {props.humidity}%</span>\r\n            </p>}\r\n        {\r\n            props.description && <p className=\"weather__key\"> Conditions:\r\n                <span className=\"weather__value\"> {props.description}</span>\r\n            </p>} \r\n        {\r\n            props.error && <p className=\"weather__error\"> {props.error} </p>}\r\n    </div>\r\n)\r\n\r\nexport default Weather; ","import React from 'react';\n\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n//API Key\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n\n\n\nclass App extends React.Component{\n  \n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  \n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n    const data = await api_call.json();\n\n    if (city && country){\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    }else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a proper city and country.\"\n      });\n    }\n  }\n\n  render(){\n    return(\n      <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-5 title-container\">\n                <Titles />\n              </div>\n              <div className=\"col-7 form-container\">\n                <Form getWeatherProp={this.getWeather} />\n                <Weather \n                  temperature={this.state.temperature} \n                  humidity={this.state.humidity}\n                  city={this.state.city}\n                  country={this.state.country}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\n\n        \n       \nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './App.css';\n\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}